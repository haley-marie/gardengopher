// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: symptom_deficiency_mapping.sql

package database

import (
	"context"
	"database/sql"
)

const getMappingForSymptoms = `-- name: GetMappingForSymptoms :many
SELECT sdm.deficiency_id, AVG(sdm.confidence_score) AS avg_confidence, COUNT(*) as symptom_count
FROM symptom_deficiencies sdm
WHERE sdm.symptom_id = ANY($1)
GROUP BY sdm.deficiency_id
ORDER BY avg_confidence DESC
`

type GetMappingForSymptomsRow struct {
	DeficiencyID  sql.NullInt64
	AvgConfidence float64
	SymptomCount  int64
}

func (q *Queries) GetMappingForSymptoms(ctx context.Context, symptomID sql.NullInt64) ([]GetMappingForSymptomsRow, error) {
	rows, err := q.db.QueryContext(ctx, getMappingForSymptoms, symptomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetMappingForSymptomsRow
	for rows.Next() {
		var i GetMappingForSymptomsRow
		if err := rows.Scan(&i.DeficiencyID, &i.AvgConfidence, &i.SymptomCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
