// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: diagnostic.sql

package database

import (
	"context"
	"database/sql"
	"encoding/json"

	"github.com/lib/pq"
)

const getConfidenceBasedDiagnosis = `-- name: GetConfidenceBasedDiagnosis :many
SELECT
	sdm.deficiency_id,
	AVG(sdm.confidence_score) as avg_confidence,
	COUNT(*) as symptom_count
FROM symptom_deficiencies sdm
WHERE sdm.symptom_id = ANY($1::int[])
GROUP BY sdm.deficiency_id
ORDER BY avg_confidence DESC
`

type GetConfidenceBasedDiagnosisRow struct {
	DeficiencyID  int32
	AvgConfidence float64
	SymptomCount  int64
}

func (q *Queries) GetConfidenceBasedDiagnosis(ctx context.Context, dollar_1 []int32) ([]GetConfidenceBasedDiagnosisRow, error) {
	rows, err := q.db.QueryContext(ctx, getConfidenceBasedDiagnosis, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetConfidenceBasedDiagnosisRow
	for rows.Next() {
		var i GetConfidenceBasedDiagnosisRow
		if err := rows.Scan(&i.DeficiencyID, &i.AvgConfidence, &i.SymptomCount); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDeficiencies = `-- name: GetDeficiencies :many
SELECT id, name, description, causes, treatment FROM nutrient_deficiencies ORDER BY name
`

type GetDeficienciesRow struct {
	ID          int32
	Name        string
	Description string
	Causes      string
	Treatment   string
}

func (q *Queries) GetDeficiencies(ctx context.Context) ([]GetDeficienciesRow, error) {
	rows, err := q.db.QueryContext(ctx, getDeficiencies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDeficienciesRow
	for rows.Next() {
		var i GetDeficienciesRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Causes,
			&i.Treatment,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDeficiency = `-- name: GetDeficiency :one
SELECT id, name, description, causes, treatment
FROM nutrient_deficiencies
WHERE id = $1
`

type GetDeficiencyRow struct {
	ID          int32
	Name        string
	Description string
	Causes      string
	Treatment   string
}

func (q *Queries) GetDeficiency(ctx context.Context, id int32) (GetDeficiencyRow, error) {
	row := q.db.QueryRowContext(ctx, getDeficiency, id)
	var i GetDeficiencyRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Causes,
		&i.Treatment,
	)
	return i, err
}

const getDiagnosticRulesByPlant = `-- name: GetDiagnosticRulesByPlant :many
SELECT id, plant_id, conditions_json, deficiency_id
FROM diagnostic_rules
WHERE plant_id IS NULL OR plant_id = $1
`

type GetDiagnosticRulesByPlantRow struct {
	ID             int32
	PlantID        sql.NullInt32
	ConditionsJson json.RawMessage
	DeficiencyID   int32
}

func (q *Queries) GetDiagnosticRulesByPlant(ctx context.Context, plantID sql.NullInt32) ([]GetDiagnosticRulesByPlantRow, error) {
	rows, err := q.db.QueryContext(ctx, getDiagnosticRulesByPlant, plantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetDiagnosticRulesByPlantRow
	for rows.Next() {
		var i GetDiagnosticRulesByPlantRow
		if err := rows.Scan(
			&i.ID,
			&i.PlantID,
			&i.ConditionsJson,
			&i.DeficiencyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlants = `-- name: GetPlants :many
SELECT id, name, scientific_name FROM plants ORDER BY scientific_name
`

type GetPlantsRow struct {
	ID             int32
	Name           string
	ScientificName string
}

func (q *Queries) GetPlants(ctx context.Context) ([]GetPlantsRow, error) {
	rows, err := q.db.QueryContext(ctx, getPlants)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPlantsRow
	for rows.Next() {
		var i GetPlantsRow
		if err := rows.Scan(&i.ID, &i.Name, &i.ScientificName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSymptomById = `-- name: GetSymptomById :one
SELECT id, name, description from symptoms WHERE id = $1
`

type GetSymptomByIdRow struct {
	ID          int32
	Name        string
	Description string
}

func (q *Queries) GetSymptomById(ctx context.Context, id int32) (GetSymptomByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getSymptomById, id)
	var i GetSymptomByIdRow
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const getSymptomMap = `-- name: GetSymptomMap :many
SELECT id, name FROM symptoms ORDER BY name
`

type GetSymptomMapRow struct {
	ID   int32
	Name string
}

func (q *Queries) GetSymptomMap(ctx context.Context) ([]GetSymptomMapRow, error) {
	rows, err := q.db.QueryContext(ctx, getSymptomMap)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSymptomMapRow
	for rows.Next() {
		var i GetSymptomMapRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSymptoms = `-- name: GetSymptoms :many
SELECT id, name, description FROM symptoms ORDER BY name
`

type GetSymptomsRow struct {
	ID          int32
	Name        string
	Description string
}

func (q *Queries) GetSymptoms(ctx context.Context) ([]GetSymptomsRow, error) {
	rows, err := q.db.QueryContext(ctx, getSymptoms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSymptomsRow
	for rows.Next() {
		var i GetSymptomsRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
