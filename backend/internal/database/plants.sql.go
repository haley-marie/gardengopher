// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: plants.sql

package database

import (
	"context"
)

const getAllPlants = `-- name: GetAllPlants :many
SELECT id, name, scientific_name FROM plants
ORDER BY name
`

func (q *Queries) GetAllPlants(ctx context.Context) ([]Plant, error) {
	rows, err := q.db.QueryContext(ctx, getAllPlants)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Plant
	for rows.Next() {
		var i Plant
		if err := rows.Scan(&i.ID, &i.Name, &i.ScientificName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPlantByName = `-- name: GetPlantByName :one
SELECT id, name, scientific_name FROM plants WHERE id = $1
`

func (q *Queries) GetPlantByName(ctx context.Context, id int64) (Plant, error) {
	row := q.db.QueryRowContext(ctx, getPlantByName, id)
	var i Plant
	err := row.Scan(&i.ID, &i.Name, &i.ScientificName)
	return i, err
}
